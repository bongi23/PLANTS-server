---
swagger: "2.0"
info:
  description: "Provides functions to interact with P.L.A.N.T.S. systems"
  version: "1.0.0"
  title: "P.L.A.N.T.S. API"
  license:
    name: "AGPL-v3.0"
    url: "https://www.gnu.org/licenses/agpl-3.0.en.html"
host: "localhost:8080"
tags:
- name: "plants"
  description: "Operations about plants"
- name: "data"
  description: "Operations about sensed data"
- name: "event"
  description: "Subscription and unsubscription to event from sensors"
- name: "sink"
  description: "Operations about plants"
schemes:
- "https"
- "http"
paths:
  /plants:
    get:
      tags:
      - "plants"
      summary: "Get all the known plants"
      description: "This can be done by 3rd party app"
      operationId: "get_plants"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/plant"
        400:
          description: "Missing infomation"
      x-swagger-router-controller: "swagger_server.controllers.plants_controller"
  /plants/{plant_id}:
    get:
      tags:
      - "plants"
      summary: "Get info about a plant"
      description: "This can be done by 3rd party app"
      operationId: "get_plant"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "plant_id"
        in: "path"
        description: "id of a plant"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/plant"
        400:
          description: "Missing infomation"
        404:
          description: "The plant does not exists"
      x-swagger-router-controller: "swagger_server.controllers.plants_controller"
  /plants/{plant_id}/data:
    get:
      tags:
      - "data"
      summary: "Get data of a plant"
      description: "This can be done by 3rd party app"
      operationId: "get_data"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "plant_id"
        in: "path"
        description: "id of a plant"
        required: true
        type: "integer"
        format: "int64"
      - name: "sensor"
        in: "query"
        required: false
        type: "string"
      - name: "min_value"
        in: "query"
        required: false
        type: "integer"
      - name: "max_value"
        in: "query"
        required: false
        type: "integer"
      - name: "min_time"
        in: "query"
        required: false
        type: "number"
      - name: "max_time"
        in: "query"
        required: false
        type: "number"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/data"
        400:
          description: "Missing infomation"
        404:
          description: "The plant does not exists"
      x-swagger-router-controller: "swagger_server.controllers.data_controller"
  /plants/{plant_id}/event:
    put:
      tags:
        - "event"
      summary: "Register to sensors' event"
      description: "This can be done by 3rd party app"
      operationId: "subscribe"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "plant_id"
          in: "path"
          description: "id of a plant"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "event"
          description: "event detail"
          required: true
          schema:
            $ref: "#/definitions/event"
      responses:
        200:
          description: "Ok"
          schema:
            type: "object"
            properties:
              event_id:
                type: "string"
        400:
          description: "Missing infomation"
        404:
          description: "The plant does not exists"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
  /plants/event/{event_id}:
    delete:
      tags:
        - "event"
      summary: "Unregister to sensors' event"
      description: "This can be done by 3rd party app"
      operationId: "unsubscribe"
      parameters:
        - name: "event_id"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "Ok"
        400:
          description: "Missing infomation"
        404:
          description: "The plant or the event don't exist"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
  /sink:
    put:
      tags:
        - "sink"
      summary: "Create a new plant"
      description: "This can be done by the sink"
      operationId: "add_plant"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "plant"
          description: "a plant object"
          required: true
          schema:
            $ref: "#/definitions/plant"
      responses:
        200:
          description: "Ok"
        400:
          description: "Missing infomation"
      x-swagger-router-controller: "swagger_server.controllers.sink_controller"
  /sink/{plant_id}:
    post:
      tags:
        - "sink"
      summary: "Set the sensed values"
      description: "Set sensed value for the microbit with plant_id."
      operationId: "set_values"
      consumes:
        - "application/json"
      parameters:
        - name: "plant_id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "data"
          required: false
          schema:
            $ref: "#/definitions/data"
      responses:
        200:
          description: "Ok"
        400:
          description: "Bad request"
        404:
          description: "The plant doesn't exists"
      x-swagger-router-controller: "swagger_server.controllers.sink_controller"
definitions:
  event:
    type: "object"
    required:
      - "data"
      - "return_address"
    properties:
      microbit:
        type:
          integer
        format:
          int64
      data:
        $ref: "#/definitions/event_parameter"
      return_address:
        type: "string"
  event_parameter:
    type: "object"
    properties:
      sensor:
        type: "string"
      min_value:
        type: "number"
      max_value:
        type: "number"
    example:
      sensor: "thermometer"
      min_value: 20
      max_value: 35
  data:
    type: "object"
    required:
      - "microbit"
      - "sensor"
      - "timestamp"
      - "value"
    properties:
      microbit:
        type: "integer"
        format: "int64"
      sensor:
        type: "string"
      value:
        type: "number"
      timestamp:
        type: "number"
    example:
      microbit: 0
      sensor: "sensor"
      value: 0
      timestamp: 6
  plant:
    type: "object"
    required:
      - "microbit"
      - "network"
      - "connected"
      - "sink"
      - "sensors"
    properties:
      microbit:
        type: "integer"
        format: "int64"
      network:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      connected:
        type:
          boolean
      sink:
        type:
          boolean
      sensors:
        type:
          array
        items:
          type:
            string
    example:
      microbit: 0
      description: "description"
      network: 6
      connected: true
      sink: false
      sensors: ["thermometer", "moisture"]