---
swagger: "2.0"
info:
  description: "Provides functions to 3rd parties"
  version: "1.0.0"
  title: "P.L.A.N.T.S. 3rd party api"
  license:
    name: "AGPL-v3.0"
    url: "https://www.gnu.org/licenses/agpl-3.0.en.html"
host: "localhost:8080"
tags:
- name: "plants"
  description: "Operations about plants"
- name: "data"
  description: "Operations about sensed data"
- name: "event"
  description: "Subscription and unsubscription to event from sensors"
schemes:
- "https"
- "http"
paths:
  /plants/{plant_id}:
    get:
      tags:
      - "plants"
      summary: "Get info about a plant"
      description: "This can be done by 3rd party app"
      operationId: "get_plant"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "plant_id"
        in: "path"
        description: "id of a plant"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/plant"
        400:
          description: "Missing infomation"
        404:
          description: "The plant does not exists"
      x-swagger-router-controller: "swagger_server.controllers.plants_controller"
  /data/{plant_id}:
    get:
      tags:
      - "data"
      summary: "Get data of a plant"
      description: "This can be done by 3rd party app"
      operationId: "get_data"
      produces:
      - "application/json"
      parameters:
      - name: "plant_id"
        in: "path"
        description: "id of a plant"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "filter"
        description: "filters for data"
        required: false
        schema:
          $ref: "#/definitions/filter"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/data"
        400:
          description: "Missing infomation"
        409:
          description: "The plant already exists"
      x-swagger-router-controller: "swagger_server.controllers.data_controller"
  /subscribe/{plant_id}:
    post:
      tags:
      - "event"
      summary: "Register to sensors' event"
      description: "This can be done by 3rd party app"
      operationId: "subscribe"
      consumes:
      - "application/json"
      parameters:
      - name: "plant_id"
        in: "path"
        description: "id of a plant"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "event"
        description: "event detail"
        required: false
        schema:
          $ref: "#/definitions/event%20parameter"
      responses:
        200:
          description: "Ok"
        400:
          description: "Missing infomation"
        409:
          description: "The plant already exists"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
  /unsubscribe/{plant_id}:
    put:
      tags:
      - "event"
      summary: "Unregister to sensors' event"
      description: "This can be done by 3rd party app"
      operationId: "unsubscribe"
      parameters:
      - name: "plant_id"
        in: "path"
        description: "id of a plant"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Ok"
        400:
          description: "Missing infomation"
        409:
          description: "The plant already exists"
      x-swagger-router-controller: "swagger_server.controllers.event_controller"
definitions:
  event parameter:
    properties:
      sensor:
        type: "string"
      threshold:
        type: "array"
        items:
          type: "integer"
      frequency:
        type: "integer"
        format: "int64"
  filter:
    properties:
      sensors:
        type: "array"
        items:
          type: "string"
      thresholds:
        type: "array"
        items:
          $ref: "#/definitions/filter_thresholds"
  data:
    properties:
      sensor:
        type: "string"
      value:
        type: "integer"
        format: "int64"
      timestamp:
        type: "integer"
        format: "int64"
    example:
      sensor: "sensor"
      value: 0
      timestamp: 6
  plant:
    type: "object"
    required:
    - "microbit"
    - "network"
    properties:
      microbit:
        type: "integer"
        format: "int64"
      network:
        type: "integer"
        format: "int64"
      description:
        type: "string"
    example:
      microbit: 0
      description: "description"
      network: 6
  filter_thresholds:
    properties:
      sensor:
        type: "string"
      threshold:
        type: "array"
        items:
          type: "integer"
      interval:
        type: "array"
        items:
          type: "integer"
          format: "int64"
