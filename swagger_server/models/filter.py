# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.filter_thresholds import FilterThresholds  # noqa: F401,E501
from swagger_server import util


class Filter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, sensors: List[str]=None, thresholds: List[FilterThresholds]=None):  # noqa: E501
        """Filter - a model defined in Swagger

        :param sensors: The sensors of this Filter.  # noqa: E501
        :type sensors: List[str]
        :param thresholds: The thresholds of this Filter.  # noqa: E501
        :type thresholds: List[FilterThresholds]
        """
        self.swagger_types = {
            'sensors': List[str],
            'thresholds': List[FilterThresholds]
        }

        self.attribute_map = {
            'sensors': 'sensors',
            'thresholds': 'thresholds'
        }

        self._sensors = sensors
        self._thresholds = thresholds

    @classmethod
    def from_dict(cls, dikt) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The filter of this Filter.  # noqa: E501
        :rtype: Filter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensors(self) -> List[str]:
        """Gets the sensors of this Filter.


        :return: The sensors of this Filter.
        :rtype: List[str]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors: List[str]):
        """Sets the sensors of this Filter.


        :param sensors: The sensors of this Filter.
        :type sensors: List[str]
        """

        self._sensors = sensors

    @property
    def thresholds(self) -> List[FilterThresholds]:
        """Gets the thresholds of this Filter.


        :return: The thresholds of this Filter.
        :rtype: List[FilterThresholds]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds: List[FilterThresholds]):
        """Sets the thresholds of this Filter.


        :param thresholds: The thresholds of this Filter.
        :type thresholds: List[FilterThresholds]
        """

        self._thresholds = thresholds
