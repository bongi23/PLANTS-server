# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.base_model_ import Model
from swagger_server import util


class EventParameter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, sensor: str = None, min_value: int = None, max_value: int = None, frequency: int = None):  # noqa: E501
        """EventParam - a model defined in Swagger

        :param sensor: The sensor of this EventParam.  # noqa: E501
        :type sensor: str
        :param min_value: The min_value of this EventParam.  # noqa: E501
        :type min_value: int
        :param max_value: The max_value of this EventParam.  # noqa: E501
        :type max_value: int
        :param frequency: The frequency of this EventParam.  # noqa: E501
        :type frequency: int
        """
        self.swagger_types = {
            'sensor': str,
            'min_value': int,
            'max_value': int,
            'frequency': int
        }

        self.attribute_map = {
            'sensor': 'sensor',
            'min_value': 'min_value',
            'max_value': 'max_value',
            'frequency': 'frequency'
        }

        self._sensor = sensor
        self._min_value = min_value
        self._max_value = max_value
        self._frequency = frequency

    @classmethod
    def from_dict(cls, dikt) -> 'EventParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The event_param of this EventParam.  # noqa: E501
        :rtype: EventParam
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensor(self) -> str:
        """Gets the sensor of this EventParam.


        :return: The sensor of this EventParam.
        :rtype: str
        """
        return self._sensor

    @sensor.setter
    def sensor(self, sensor: str):
        """Sets the sensor of this EventParam.


        :param sensor: The sensor of this EventParam.
        :type sensor: str
        """

        self._sensor = sensor

    @property
    def min_value(self) -> int:
        """Gets the min_value of this EventParam.


        :return: The min_value of this EventParam.
        :rtype: int
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value: int):
        """Sets the min_value of this EventParam.


        :param min_value: The min_value of this EventParam.
        :type min_value: int
        """

        self._min_value = min_value

    @property
    def max_value(self) -> int:
        """Gets the max_value of this EventParam.


        :return: The max_value of this EventParam.
        :rtype: int
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value: int):
        """Sets the max_value of this EventParam.


        :param max_value: The max_value of this EventParam.
        :type max_value: int
        """

        self._max_value = max_value

    @property
    def frequency(self) -> int:
        """Gets the frequency of this EventParam.


        :return: The frequency of this EventParam.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: int):
        """Sets the frequency of this EventParam.


        :param frequency: The frequency of this EventParam.
        :type frequency: int
        """

        self._frequency = frequency
