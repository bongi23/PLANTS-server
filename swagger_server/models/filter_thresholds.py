# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FilterThresholds(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, sensor: str=None, threshold: List[int]=None, interval: List[int]=None):  # noqa: E501
        """FilterThresholds - a model defined in Swagger

        :param sensor: The sensor of this FilterThresholds.  # noqa: E501
        :type sensor: str
        :param threshold: The threshold of this FilterThresholds.  # noqa: E501
        :type threshold: List[int]
        :param interval: The interval of this FilterThresholds.  # noqa: E501
        :type interval: List[int]
        """
        self.swagger_types = {
            'sensor': str,
            'threshold': List[int],
            'interval': List[int]
        }

        self.attribute_map = {
            'sensor': 'sensor',
            'threshold': 'threshold',
            'interval': 'interval'
        }

        self._sensor = sensor
        self._threshold = threshold
        self._interval = interval

    @classmethod
    def from_dict(cls, dikt) -> 'FilterThresholds':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The filter_thresholds of this FilterThresholds.  # noqa: E501
        :rtype: FilterThresholds
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensor(self) -> str:
        """Gets the sensor of this FilterThresholds.


        :return: The sensor of this FilterThresholds.
        :rtype: str
        """
        return self._sensor

    @sensor.setter
    def sensor(self, sensor: str):
        """Sets the sensor of this FilterThresholds.


        :param sensor: The sensor of this FilterThresholds.
        :type sensor: str
        """

        self._sensor = sensor

    @property
    def threshold(self) -> List[int]:
        """Gets the threshold of this FilterThresholds.


        :return: The threshold of this FilterThresholds.
        :rtype: List[int]
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold: List[int]):
        """Sets the threshold of this FilterThresholds.


        :param threshold: The threshold of this FilterThresholds.
        :type threshold: List[int]
        """

        self._threshold = threshold

    @property
    def interval(self) -> List[int]:
        """Gets the interval of this FilterThresholds.


        :return: The interval of this FilterThresholds.
        :rtype: List[int]
        """
        return self._interval

    @interval.setter
    def interval(self, interval: List[int]):
        """Sets the interval of this FilterThresholds.


        :param interval: The interval of this FilterThresholds.
        :type interval: List[int]
        """

        self._interval = interval
