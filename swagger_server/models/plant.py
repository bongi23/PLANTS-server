# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Plant(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, microbit: int=None, network: int=None, description: str=None):  # noqa: E501
        """Plant - a model defined in Swagger

        :param microbit: The microbit of this Plant.  # noqa: E501
        :type microbit: int
        :param network: The network of this Plant.  # noqa: E501
        :type network: int
        :param description: The description of this Plant.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'microbit': int,
            'network': int,
            'description': str
        }

        self.attribute_map = {
            'microbit': 'microbit',
            'network': 'network',
            'description': 'description'
        }

        self._microbit = microbit
        self._network = network
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'Plant':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The plant of this Plant.  # noqa: E501
        :rtype: Plant
        """
        return util.deserialize_model(dikt, cls)

    @property
    def microbit(self) -> int:
        """Gets the microbit of this Plant.


        :return: The microbit of this Plant.
        :rtype: int
        """
        return self._microbit

    @microbit.setter
    def microbit(self, microbit: int):
        """Sets the microbit of this Plant.


        :param microbit: The microbit of this Plant.
        :type microbit: int
        """
        if microbit is None:
            raise ValueError("Invalid value for `microbit`, must not be `None`")  # noqa: E501

        self._microbit = microbit

    @property
    def network(self) -> int:
        """Gets the network of this Plant.


        :return: The network of this Plant.
        :rtype: int
        """
        return self._network

    @network.setter
    def network(self, network: int):
        """Sets the network of this Plant.


        :param network: The network of this Plant.
        :type network: int
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def description(self) -> str:
        """Gets the description of this Plant.


        :return: The description of this Plant.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Plant.


        :param description: The description of this Plant.
        :type description: str
        """

        self._description = description
