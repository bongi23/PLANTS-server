# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.filter import Filter  # noqa: F401,E501
from swagger_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, data: Filter=None, return_address: str=None):  # noqa: E501
        """Event - a model defined in Swagger

        :param data: The data of this Event.  # noqa: E501
        :type data: Filter
        :param return_address: The return_address of this Event.  # noqa: E501
        :type return_address: str
        """
        self.swagger_types = {
            'data': Filter,
            'return_address': str
        }

        self.attribute_map = {
            'data': 'data',
            'return_address': 'return_address'
        }

        self._data = data
        self._return_address = return_address

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> Filter:
        """Gets the data of this Event.


        :return: The data of this Event.
        :rtype: Filter
        """
        return self._data

    @data.setter
    def data(self, data: Filter):
        """Sets the data of this Event.


        :param data: The data of this Event.
        :type data: Filter
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def return_address(self) -> str:
        """Gets the return_address of this Event.


        :return: The return_address of this Event.
        :rtype: str
        """
        return self._return_address

    @return_address.setter
    def return_address(self, return_address: str):
        """Sets the return_address of this Event.


        :param return_address: The return_address of this Event.
        :type return_address: str
        """
        if return_address is None:
            raise ValueError("Invalid value for `return_address`, must not be `None`")  # noqa: E501

        self._return_address = return_address
