# coding: utf-8

from __future__ import absolute_import

from swagger_server.models.base_model_ import Model
from swagger_server.models.event_parameter import EventParameter  # noqa: F401,E501
from swagger_server import util


class Event(Model):
        """NOTE: This class is auto generated by the swagger code generator program.
        Do not edit the class manually.
        """

        def __init__(self, microbit: int=None, data: EventParameter=None, return_address: str=None):  # noqa: E501
                """Event - a model defined in Swagger
                :param microbit: The microbit of this Event.  # noqa: E501
                :type microbit: int
                :param data: The data of this Event.  # noqa: E501
                :type data: EventParam
                :param return_address: The return_address of this Event.  # noqa: E501
                :type return_address: str
                """
                self.swagger_types = {
                        'microbit': int,
                        'data': EventParameter,
                        'return_address': str
                }

                self.attribute_map = {
                        'microbit': 'microbit',
                        'data': 'data',
                        'return_address': 'return_address'
                }

                self._microbit = microbit
                self._data = data
                self._return_address = return_address

        @classmethod
        def from_dict(cls, dikt) -> 'Event':
                """Returns the dict as a model
                :param dikt: A dict.
                :type: dict
                :return: The event of this Event.  # noqa: E501
                :rtype: Event
                """
                return util.deserialize_model(dikt, cls)

        @property
        def microbit(self) -> int:
                """Gets the microbit of this Event.
                :return: The microbit of this Event.
                :rtype: int
                """
                return self._microbit

        @microbit.setter
        def microbit(self, microbit: int):
                """Sets the microbit of this Event.
                :param microbit: The microbit of this Event.
                :type microbit: int
                """

                self._microbit = microbit

        @property
        def data(self) -> EventParameter:
                """Gets the data of this Event.
                :return: The data of this Event.
                :rtype: EventParam
                """
                return self._data

        @data.setter
        def data(self, data: EventParameter):
                """Sets the data of this Event.
                :param data: The data of this Event.
                :type data: EventParam
                """
                if data is None:
                        raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

                self._data = data

        @property
        def return_address(self) -> str:
                """Gets the return_address of this Event.
                :return: The return_address of this Event.
                :rtype: str
                """
                return self._return_address

        @return_address.setter
        def return_address(self, return_address: str):
                """Sets the return_address of this Event.
                :param return_address: The return_address of this Event.
                :type return_address: str
                """
                if return_address is None:
                        raise ValueError("Invalid value for `return_address`, must not be `None`")  # noqa: E501

                self._return_address = return_address
